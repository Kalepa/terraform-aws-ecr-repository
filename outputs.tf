//==================================================
//     Outputs that match the input variables
//==================================================
output "name" {
  description = "The value of the `name` input variable."
  value       = var.name
}
output "mutable" {
  description = "The value of the `mutable` input variable, or the default value if the input was `null`."
  value       = var.mutable
}
output "scan_on_push" {
  description = "The value of the `scan_on_push` input variable, or the default value if the input was `null`."
  value       = var.scan_on_push
}
output "kms_key_id" {
  description = "The value of the `kms_key_id` input variable."
  value       = var.kms_key_id
}
output "generate_authorization_token" {
  description = "The value of the `generate_authorization_token` input variable, or the default value if the input was `null`."
  value       = var.generate_authorization_token
}
output "create_repository_policy" {
  description = "The value of the `create_repository_policy` input variable, or the default value if the input was `null`."
  value       = var.create_repository_policy
}
output "repository_policy" {
  description = "The JSON-encoded repository access policy that was applied (normalized value of the `repository_policy` input variable)."
  value       = local.repository_policy
}
output "create_lifecycle_policy" {
  description = "The value of the `create_lifecycle_policy` input variable, or the default value if the input was `null`."
  value       = var.create_lifecycle_policy
}
output "lifecycle_policy" {
  description = "The JSON-encoded lifecycle policy that was applied (normalized value of the `lifecycle_policy` input variable)."
  value       = local.lifecycle_policy
}
output "include_registry_authorization_in_push_policy" {
  description = "The value of the `include_registry_authorization_in_push_policy` input variable, or the default value if the input was `null`."
  value       = var.include_registry_authorization_in_push_policy
}
output "include_registry_authorization_in_pull_policy" {
  description = "The value of the `include_registry_authorization_in_pull_policy` input variable, or the default value if the input was `null`."
  value       = var.include_registry_authorization_in_pull_policy
}
output "create_policies" {
  description = "The value of the `create_policies` input variable, or the default value if the input was `null`."
  value       = var.create_policies
}
output "force_delete" {
  description = "The value of the `force_delete` input variable, or the default value if the input was `null`."
  value       = var.force_delete
}
output "tags" {
  description = "The value of the `tags` input variable, or the default value if the input was `null`."
  value       = var.tags
}


//==================================================
//       Outputs generated by this module
//==================================================
output "region" {
  description = "The AWS region that this module was deployed in."
  value       = local.region
}

output "push_policy_json" {
  description = "A JSON-encoded IAM policy document that allows pushing images to the repository."
  value       = data.aws_iam_policy_document.ecr_push.json
}

output "push_policy_arn" {
  description = "The ARN of an IAM policy that allows pushing images to the repository."
  value       = var.create_policies ? aws_iam_policy.ecr_push[0].arn : null
}

output "pull_policy_json" {
  description = "A JSON-encoded IAM policy document that allows pulling images from the repository."
  value       = data.aws_iam_policy_document.ecr_pull.json
}

output "pull_policy_arn" {
  description = "The ARN of an IAM policy that allows pulling images from the repository."
  value       = var.create_policies ? aws_iam_policy.ecr_pull[0].arn : null
}

output "repository_domain" {
  description = "The domain of the ECR repository. Useful when logging in with Docker."
  value       = split("/", aws_ecr_repository.this.repository_url)[0]
}

output "repository_url" {
  description = "The full URL of the ECR repository."
  value       = aws_ecr_repository.this.repository_url
}

output "registry_id" {
  description = "The ID of the ECR registry where the repository was created."
  value       = aws_ecr_repository.this.registry_id
}

output "authorization_token" {
  description = "The attributes of the `aws_ecr_authorization_token` data source. A value will only be provided for this output if the `generate_authorization_token` variable was `true`."
  value       = var.generate_authorization_token ? data.aws_ecr_authorization_token.this[0] : null
}

output "iam_actions_pull" {
  description = "A list of IAM actions needed for pulling images from the repository. This output is for convenience in generating repository policies."
  value       = local.pull_actions
}

output "iam_actions_push" {
  description = "A list of IAM actions needed for pushing images to the repository. This output is for convenience in generating repository policies."
  value       = local.push_actions
}

output "complete" {
  description = "A value that always returns `true`, but won't be available until all resources in this module have completed their create/update/delete operations."
  depends_on = [
    aws_ecr_repository.this,
    data.aws_ecr_authorization_token.this,
    aws_ecr_repository_policy.this,
    aws_ecr_lifecycle_policy.this,
    data.aws_iam_policy_document.ecr_pull,
    data.aws_iam_policy_document.ecr_push,
    aws_iam_policy.ecr_pull,
    aws_iam_policy.ecr_push,
  ]
  value = true
}
